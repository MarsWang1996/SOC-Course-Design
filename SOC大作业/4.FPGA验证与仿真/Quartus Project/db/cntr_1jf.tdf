--lpm_counter CBX_DECLARE_ALL_CONNECTED_PORTS="OFF" DEVICE_FAMILY="Stratix" lpm_direction="UP" lpm_modulus=638 lpm_port_updown="PORT_UNUSED" lpm_width=10 clk_en clock q
--VERSION_BEGIN 9.1 cbx_cycloneii 2009:10:21:21:17:40:SJ cbx_lpm_add_sub 2009:10:21:21:17:40:SJ cbx_lpm_compare 2009:10:21:21:17:40:SJ cbx_lpm_counter 2009:10:21:21:17:40:SJ cbx_lpm_decode 2009:10:21:21:17:40:SJ cbx_mgl 2009:10:21:21:32:45:SJ cbx_stratix 2009:10:21:21:17:40:SJ cbx_stratixii 2009:10:21:21:17:40:SJ  VERSION_END


-- Copyright (C) 1991-2009 Altera Corporation
--  Your use of Altera Corporation's design tools, logic functions 
--  and other software and tools, and its AMPP partner logic 
--  functions, and any output files from any of the foregoing 
--  (including device programming or simulation files), and any 
--  associated documentation or information are expressly subject 
--  to the terms and conditions of the Altera Program License 
--  Subscription Agreement, Altera MegaCore Function License 
--  Agreement, or other applicable license agreement, including, 
--  without limitation, that your use is for the sole purpose of 
--  programming logic devices manufactured by Altera and sold by 
--  Altera or its authorized distributors.  Please refer to the 
--  applicable agreement for further details.


FUNCTION cmpr_57c (dataa[9..0], datab[9..0])
RETURNS ( aeb);
FUNCTION stratix_lcell (aclr, aload, cin, clk, dataa, datab, datac, datad, ena, inverta, regcascin, sclr, sload)
WITH ( cin0_used, cin1_used, cin_used, lut_mask, operation_mode, output_mode, power_up, register_cascade_mode, sum_lutc_input, synch_mode, x_on_violation)
RETURNS ( combout, cout, regout);

--synthesis_resources = lut 11 
SUBDESIGN cntr_1jf
( 
	clk_en	:	input;
	clock	:	input;
	q[9..0]	:	output;
) 
VARIABLE 
	cmpr4 : cmpr_57c;
	counter_cella0 : stratix_lcell
		WITH (
			cin_used = "false",
			lut_mask = "11AA",
			operation_mode = "arithmetic",
			synch_mode = "on"
		);
	counter_cella1 : stratix_lcell
		WITH (
			cin_used = "true",
			lut_mask = "12A0",
			operation_mode = "arithmetic",
			sum_lutc_input = "cin",
			synch_mode = "on"
		);
	counter_cella2 : stratix_lcell
		WITH (
			cin_used = "true",
			lut_mask = "12A0",
			operation_mode = "arithmetic",
			sum_lutc_input = "cin",
			synch_mode = "on"
		);
	counter_cella3 : stratix_lcell
		WITH (
			cin_used = "true",
			lut_mask = "12A0",
			operation_mode = "arithmetic",
			sum_lutc_input = "cin",
			synch_mode = "on"
		);
	counter_cella4 : stratix_lcell
		WITH (
			cin_used = "true",
			lut_mask = "12A0",
			operation_mode = "arithmetic",
			sum_lutc_input = "cin",
			synch_mode = "on"
		);
	counter_cella5 : stratix_lcell
		WITH (
			cin_used = "true",
			lut_mask = "12A0",
			operation_mode = "arithmetic",
			sum_lutc_input = "cin",
			synch_mode = "on"
		);
	counter_cella6 : stratix_lcell
		WITH (
			cin_used = "true",
			lut_mask = "12A0",
			operation_mode = "arithmetic",
			sum_lutc_input = "cin",
			synch_mode = "on"
		);
	counter_cella7 : stratix_lcell
		WITH (
			cin_used = "true",
			lut_mask = "12A0",
			operation_mode = "arithmetic",
			sum_lutc_input = "cin",
			synch_mode = "on"
		);
	counter_cella8 : stratix_lcell
		WITH (
			cin_used = "true",
			lut_mask = "12A0",
			operation_mode = "arithmetic",
			sum_lutc_input = "cin",
			synch_mode = "on"
		);
	counter_cella9 : stratix_lcell
		WITH (
			cin_used = "true",
			lut_mask = "12A0",
			operation_mode = "arithmetic",
			sum_lutc_input = "cin",
			synch_mode = "on"
		);
	cout_bit : stratix_lcell
		WITH (
			cin_used = "true",
			lut_mask = "F8F8",
			operation_mode = "normal",
			sum_lutc_input = "cin",
			synch_mode = "off"
		);
	aclr	: NODE;
	aclr_actual	: WIRE;
	compare_result	: WIRE;
	data[9..0]	: NODE;
	modulus_bus[9..0]	: WIRE;
	modulus_trigger	: WIRE;
	safe_q[9..0]	: WIRE;
	sclr	: NODE;
	sload	: NODE;
	time_to_clear	: WIRE;
	updownDir	: WIRE;

BEGIN 
	cmpr4.dataa[] = safe_q[];
	cmpr4.datab[] = modulus_bus[];
	counter_cella[9..0].aclr = aclr_actual;
	counter_cella[9..0].aload = B"0000000000";
	counter_cella[1].cin = counter_cella[0].cout;
	counter_cella[2].cin = counter_cella[1].cout;
	counter_cella[3].cin = counter_cella[2].cout;
	counter_cella[4].cin = counter_cella[3].cout;
	counter_cella[5].cin = counter_cella[4].cout;
	counter_cella[6].cin = counter_cella[5].cout;
	counter_cella[7].cin = counter_cella[6].cout;
	counter_cella[8].cin = counter_cella[7].cout;
	counter_cella[9].cin = counter_cella[8].cout;
	counter_cella[9..0].clk = clock;
	counter_cella[9..0].dataa = safe_q[];
	counter_cella[9..0].datab = B"0000000000";
	counter_cella[9..0].datac = ((sload & data[]) # (((! sload) & modulus_bus[]) & (! updownDir)));
	counter_cella[9..0].ena = clk_en;
	counter_cella[9..0].sclr = sclr;
	counter_cella[9..0].sload = (sload # modulus_trigger);
	cout_bit.cin = counter_cella[9].cout;
	cout_bit.dataa = updownDir;
	cout_bit.datab = time_to_clear;
	aclr = GND;
	aclr_actual = aclr;
	compare_result = cmpr4.aeb;
	data[] = GND;
	modulus_bus[] = B"1001111101";
	modulus_trigger = cout_bit.combout;
	q[] = safe_q[];
	safe_q[] = counter_cella[9..0].regout;
	sclr = GND;
	sload = GND;
	time_to_clear = compare_result;
	updownDir = B"1";
END;
--VALID FILE
