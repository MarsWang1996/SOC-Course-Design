--altmult_add ADDNSUB_MULTIPLIER_PIPELINE_REGISTER1="UNREGISTERED" ADDNSUB_MULTIPLIER_PIPELINE_REGISTER3="UNREGISTERED" ADDNSUB_MULTIPLIER_REGISTER1="UNREGISTERED" ADDNSUB_MULTIPLIER_REGISTER3="UNREGISTERED" CBX_DECLARE_ALL_CONNECTED_PORTS="OFF" DEVICE_FAMILY="Stratix" DSP_BLOCK_BALANCING="Auto" INPUT_REGISTER_A0="UNREGISTERED" INPUT_REGISTER_A1="UNREGISTERED" INPUT_REGISTER_A2="UNREGISTERED" INPUT_REGISTER_A3="UNREGISTERED" INPUT_REGISTER_B0="UNREGISTERED" INPUT_REGISTER_B1="UNREGISTERED" INPUT_REGISTER_B2="UNREGISTERED" INPUT_REGISTER_B3="UNREGISTERED" MULTIPLIER1_DIRECTION="ADD" MULTIPLIER_REGISTER0="UNREGISTERED" MULTIPLIER_REGISTER1="UNREGISTERED" NUMBER_OF_MULTIPLIERS=2 OUTPUT_REGISTER="UNREGISTERED" REPRESENTATION_A="UNSIGNED" REPRESENTATION_B="UNSIGNED" SIGNED_PIPELINE_REGISTER_A="UNREGISTERED" SIGNED_PIPELINE_REGISTER_B="UNREGISTERED" SIGNED_REGISTER_A="UNREGISTERED" SIGNED_REGISTER_B="UNREGISTERED" WIDTH_A=10 WIDTH_B=10 WIDTH_RESULT=21 ZERO_CHAINOUT_OUTPUT_REGISTER="UNREGISTERED" ZERO_LOOPBACK_OUTPUT_REGISTER="UNREGISTERED" ZERO_LOOPBACK_PIPELINE_REGISTER="UNREGISTERED" ZERO_LOOPBACK_REGISTER="UNREGISTERED" dataa datab result CARRY_CHAIN="MANUAL" CARRY_CHAIN_LENGTH=70
--VERSION_BEGIN 9.1 cbx_alt_ded_mult_y 2009:10:21:21:17:40:SJ cbx_altmult_add 2009:10:21:21:17:40:SJ cbx_cycloneii 2009:10:21:21:17:40:SJ cbx_lpm_add_sub 2009:10:21:21:17:40:SJ cbx_lpm_mult 2009:10:21:21:17:40:SJ cbx_mgl 2009:10:21:21:32:45:SJ cbx_padd 2009:10:21:21:17:40:SJ cbx_parallel_add 2009:10:21:21:17:40:SJ cbx_stratix 2009:10:21:21:17:40:SJ cbx_stratixii 2009:10:21:21:17:40:SJ cbx_util_mgl 2009:10:21:21:17:40:SJ  VERSION_END


-- Copyright (C) 1991-2009 Altera Corporation
--  Your use of Altera Corporation's design tools, logic functions 
--  and other software and tools, and its AMPP partner logic 
--  functions, and any output files from any of the foregoing 
--  (including device programming or simulation files), and any 
--  associated documentation or information are expressly subject 
--  to the terms and conditions of the Altera Program License 
--  Subscription Agreement, Altera MegaCore Function License 
--  Agreement, or other applicable license agreement, including, 
--  without limitation, that your use is for the sole purpose of 
--  programming logic devices manufactured by Altera and sold by 
--  Altera or its authorized distributors.  Please refer to the 
--  applicable agreement for further details.


FUNCTION stratix_mac_mult (aclr[3..0], clk[3..0], dataa[dataa_width-1..0], datab[datab_width-1..0], ena[3..0], signa, signb)
WITH ( dataa_clear, dataa_clock, dataa_width, datab_clear, datab_clock, datab_width, output_clear, output_clock, signa_clear, signa_clock, signa_internally_grounded, signb_clear, signb_clock, signb_internally_grounded)
RETURNS ( dataout[dataa_width+datab_width-1..0], scanouta[dataa_width-1..0], scanoutb[datab_width-1..0]);
FUNCTION stratix_mac_out (aclr[3..0], addnsub0, addnsub1, clk[3..0], dataa[dataa_width-1..0], datab[datab_width-1..0], datac[datac_width-1..0], datad[datad_width-1..0], ena[3..0], signa, signb, zeroacc)
WITH ( addnsub0_clear, addnsub0_clock, addnsub0_pipeline_clear, addnsub0_pipeline_clock, addnsub1_clear, addnsub1_clock, addnsub1_pipeline_clear, addnsub1_pipeline_clock, data_out_programmable_invert, dataa_width = 1, datab_width = 1, datac_width = 1, datad_width = 1, dataout_width = 72, operation_mode, output_clear, output_clock, signa_clear, signa_clock, signa_pipeline_clear, signa_pipeline_clock, signb_clear, signb_clock, signb_pipeline_clear, signb_pipeline_clock, zeroacc_clear, zeroacc_clock, zeroacc_pipeline_clear, zeroacc_pipeline_clock)
RETURNS ( accoverflow, dataout[dataout_width-1..0]);

--synthesis_resources = dsp_9bit 4 
SUBDESIGN mult_add_ssi3
( 
	dataa[19..0]	:	input;
	datab[19..0]	:	input;
	result[20..0]	:	output;
) 
VARIABLE 
	mac_mult1 : stratix_mac_mult
		WITH (
			dataa_width = 10,
			datab_width = 10
		);
	mac_mult2 : stratix_mac_mult
		WITH (
			dataa_width = 10,
			datab_width = 10
		);
	mac_out3 : stratix_mac_out
		WITH (
			dataa_width = 20,
			datab_width = 20,
			dataout_width = 72,
			operation_mode = "one_level_adder"
		);
	aclr0	: NODE;
	aclr1	: NODE;
	aclr2	: NODE;
	aclr3	: NODE;
	clock0	: NODE;
	clock1	: NODE;
	clock2	: NODE;
	clock3	: NODE;
	dataa_bus[19..0]	: WIRE;
	datab_bus[19..0]	: WIRE;
	ena0	: NODE;
	ena1	: NODE;
	ena2	: NODE;
	ena3	: NODE;

BEGIN 
	mac_mult1.aclr[] = ( aclr3, aclr2, aclr1, aclr0);
	mac_mult1.clk[] = ( clock3, clock2, clock1, clock0);
	mac_mult1.dataa[] = ( dataa_bus[9..0]);
	mac_mult1.datab[] = ( datab_bus[9..0]);
	mac_mult1.ena[] = ( ena3, ena2, ena1, ena0);
	mac_mult1.signa = B"0";
	mac_mult1.signb = B"0";
	mac_mult2.aclr[] = ( aclr3, aclr2, aclr1, aclr0);
	mac_mult2.clk[] = ( clock3, clock2, clock1, clock0);
	mac_mult2.dataa[] = ( dataa_bus[19..10]);
	mac_mult2.datab[] = ( datab_bus[19..10]);
	mac_mult2.ena[] = ( ena3, ena2, ena1, ena0);
	mac_mult2.signa = B"0";
	mac_mult2.signb = B"0";
	mac_out3.aclr[] = ( aclr3, aclr2, aclr1, aclr0);
	mac_out3.addnsub0 = B"1";
	mac_out3.addnsub1 = B"1";
	mac_out3.clk[] = ( clock3, clock2, clock1, clock0);
	mac_out3.dataa[] = ( mac_mult1.dataout[19..0]);
	mac_out3.datab[] = ( mac_mult2.dataout[19..0]);
	mac_out3.ena[] = ( ena3, ena2, ena1, ena0);
	mac_out3.signa = B"0";
	mac_out3.signb = B"0";
	aclr0 = GND;
	aclr1 = GND;
	aclr2 = GND;
	aclr3 = GND;
	clock0 = VCC;
	clock1 = VCC;
	clock2 = VCC;
	clock3 = VCC;
	dataa_bus[] = ( dataa[19..0]);
	datab_bus[] = ( datab[19..0]);
	ena0 = VCC;
	ena1 = VCC;
	ena2 = VCC;
	ena3 = VCC;
	result[20..0] = mac_out3.dataout[20..0];
END;
--VALID FILE
